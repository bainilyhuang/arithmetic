分治
查找一个数组的最大值

Merge(A,p,q,r)//A数组,排序数组的起始位置,排序数组的中间位置,排序数组的后置位。

1,n1=q-p+1
2,n2=r-q
3,L[1..n1+1] R[1...n2+1]//生成两个数组
4,for i=1 to n1
5,　　L[i]=A[p+i-1]//复制
6,for j=1 to n2
7,　　R[j]=A[q+j] //复制
8,L[n1+1]=无穷
9,R[n2+1=无穷
10,i=1
11,j=1
12,for k=p to r
13,　　if L[i]<=R[j]
14,　　　　A[k]=L[i]
15,　　　　i=i+1
16,　　else A[k]=R[j]
17,　　　　j=j+1
MERGE-SORT(A,p,r)

1  if p < r
2      q = (p+r)/2 取底
3      MERGE-SORT(A,p,q)
4      MERGE-SORT(A,q+1,r)
5      MERGE(A,p,q,r)
 

求一个数组里的最大子数组。

FIND-MAX-CROSSING-SUBARRAY(A,low,mid,high)

 1 left-sum=负无穷
 2 sum=0
 3 for i=mid downto low
 4     sum=sum+A[i]
 5     if sum > left-sum
 6         left-sum=sum
 7         max-left=i
 8 right-sum=负无穷
 9 sum=0
10 for j=mid+1 to high
11     sum=sum+A[j]
12     if sum >right-sum
13         right-sum=sum
14         max-right=j
15 return (max-left,max-right,left-sum+right-sum)
 

FIND-MAXIMUM-SUBARRAY(A,low,high)

 1 if high==low
 2     return (low,high,A[low])
 3 else mid=(low+high)/2 下届
 4     (left-low,left-high,left-sum)=FIND-MAXIMUM-SUBARRAY(A,low,mid)
 5     (right-low,right-high,right-sum)=FIND-MAXIMUM-SUBARRAY(A,mid+1,high)
 6     (cross-low,cross-high,cross-sum)=FIND-MAX-CROSSING-SUBARRAY(A,low,mid,high)
 7     if(left-sum>=right-sum) and left-sum>=cross-sum
 8         return(left-low,left-high,left-sum)
 9     else if right-sum>=left-sum and right-sum>=cross-sum
10         return (right-low,right-high,right-sum)
11     else return (cross-low,cross-high,cross-sum)
关于矩阵的算法

暴力求解

SQUARE-MATRIX-MULTIPLY(A,B)

1 n=A.rows
2 let C be a new nXn matrix
3 for i=1 to n
4     for j=1 to n
5         Cij=0
6         for k=1 to n
7             Cij=Cij+Aik*Bkj
8 return C


 
